import java.nio.charset.StandardCharsets

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.ajoberstar.reckon' version '0.19.2'
}

group = 'fr.anisekai'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
    sourceCompatibility = JavaVersion.VERSION_24
    targetCompatibility = JavaVersion.VERSION_24
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = StandardCharsets.UTF_8.name()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'io.sentry:sentry-spring-boot-starter-jakarta:8.18.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

    implementation 'com.github.f4b6a3:uuid-creator:6.1.1'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.5.4'
    implementation 'org.flywaydb:flyway-core:11.10.5'
    implementation 'org.flywaydb:flyway-mysql:11.10.5'

    implementation 'net.dv8tion:JDA:5.6.1'

    implementation 'fr.anisekai:wireless:2.0.2'
    implementation 'fr.anisekai:sanctum:1.0.1'

    implementation 'fr.alexpado:simple-http-client:1.1.2'
    implementation('fr.alexpado:jda-interactions-extension:1.1.0') {
        exclude group: 'io.sentry'
    }

    implementation 'com.github.slugify:slugify:3.0.7'
    implementation 'org.jsoup:jsoup:1.21.1'
    implementation 'org.json:json:20250517'
    implementation 'org.jetbrains:annotations:26.0.2'

    implementation 'com.rometools:rome:2.1.0'
}

test {
    useJUnitPlatform()
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

reckon {
    defaultInferredScope = 'patch'
    stages('dev', 'beta', 'rc', 'final')

    scopeCalc = calcScopeFromProp() | calcScopeFromCommitMessages()
    stageCalc = calcStageFromProp()
}

tasks.register('generateJava', Copy) {
    def context = [version: project.version.toString()]
    inputs.properties(context)
    from 'src/template/java'
    into layout.buildDirectory.dir("generated/java")
    expand(context)
}

sourceSets.main.java.srcDir layout.buildDirectory.dir("generated/java")
