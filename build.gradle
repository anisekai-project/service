import java.nio.charset.StandardCharsets

plugins {
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.ajoberstar.reckon' version '0.19.2'
}

def generalCharset = StandardCharsets.UTF_8.name()

static def isNonStable(String version) {
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

group = 'fr.anisekai'

compileJava.options.encoding = generalCharset
compileTestJava.options.encoding = generalCharset
javadoc.options.encoding = generalCharset

reckon {
    defaultInferredScope = 'patch'
    stages('dev', 'beta', 'rc', 'final')

    scopeCalc = calcScopeFromProp() | calcScopeFromCommitMessages()
    stageCalc = calcStageFromProp()
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation group: 'io.sentry', name: 'sentry-spring-boot-starter-jakarta', version: '8.13.3'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.5'

    implementation group: 'com.auth0', name: 'java-jwt', version: '4.5.0'

    runtimeOnly group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.5.3'
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '11.9.1'
    implementation group: 'org.flywaydb', name: 'flyway-mysql', version: '11.9.1'

    implementation group: 'net.dv8tion', name: 'JDA', version: '5.6.1'

    implementation group: 'fr.anisekai', name: 'wireless', version: '1.6.0'
    implementation group: 'fr.anisekai', name: 'sanctum', version: '1.0.1'

    implementation group: 'fr.alexpado', name: 'simple-http-client', version: '1.1.2'
    implementation(group: 'fr.alexpado', name: 'jda-interactions-extension', version: '1.0.0-rc.2') {
        exclude(group: 'io.sentry')
    }

    implementation group: 'com.github.slugify', name: 'slugify', version: '3.0.7'
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.20.1'
    implementation group: 'org.json', name: 'json', version: '20250517'

    implementation group: 'org.jetbrains', name: 'annotations', version: '26.0.2'

    implementation group: 'rome', name: 'rome', version: '1.0'
}

test {
    useJUnitPlatform()
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

tasks.register('generateJava', Copy) {
    def context = [version: project.version.toString()]
    inputs.properties context
    from 'src/template/java'
    into "$buildDir/generated/java"
    expand context
}

sourceSets.main.java.srcDir "$buildDir/generated/java"
compileJava.dependsOn 'generateJava'
